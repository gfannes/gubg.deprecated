#!/usr/bin/env ruby

require("gubg/utils")
require("gubg/options")
require("gubg/output")

options = parseOptions(name: "Searches recursively in files: fr <options> <pattern>", author: "Geert Fannes") do |parser, options|
	parser.on("-i", "--case-insensitive", "Case insensitive search"){options[:ci] = true}
	parser.on("-w", "--match-word", "Match word"){options[:word] = true}
	parser.on("-a", "--all", "Search all files"){options[:all] = true}
	parser.on("-e", "--export FILE", "Export matches to FILE"){|filename|options[:export] = filename}
	options[:operation] = :show
	parser.on("-o", "--open", "Open files in editor"){options[:open] = true; options[:operation] = :open}
	parser.on("-c", "--choose", "Asks what match to open"){options[:choose] = true; options[:operation] = :choose}
	parser.on("-r", "--try-replace NEWSTR", "Show how a replacement would look like") do |newstr|
		options[:newStr] = newstr
		options[:operation] = :tryReplace
	end
	parser.on("-R", "--replace NEWSTR", "Do the actual replacement") do |newstr|
		options[:newStr] = newstr
		options[:operation] = :replace
	end
end
files2Open = (options[:open] || options[:choose]) && []

finalize("You have to provide one and only one search pattern", :error) unless ARGV.length == 1

lookFor = if options[:word]
		  Regexp.new("\\b#{ARGV[0]}\\b", options[:ci])
	  else
		  Regexp.new(ARGV[0], options[:ci])
	  end
puts("Regexp: #{lookFor}") if $verbose

recursor = Proc.new do |dir|
	case File.basename(dir)
	when /^\./
		false
	when /^(html)|(docs)|(data)$/
		false
	else
		true
	end
end

unwantedExtensions = %w[a o dll pem der b64 cnf txt bin sh py java jar cloak.c cloak.cpp asm]
str = unwantedExtensions.map{|ext|"(\\.#{ext})"}*"|"
reUnwantedExtensions = /(#{str})$/

wantedExtensions = %w[c h cpp hpp d rb S asm asciidoc adoc]
str = wantedExtensions.map{|ext|"(\\.#{ext})"}*"|"
reWantedExtensions = /(#{str})$/

output = Output.new(options[:export] && File.open(options[:export], "w"))
pwd = Dir.pwd+'/'
Dir.each("./",recursor) do |dir, fn|
	doCheck = true
	case fn
	when reUnwantedExtensions
		doCheck = false
	when reWantedExtensions
	when /^Makefile/
	when /^makefile/
	else
		doCheck = false
	end unless options[:all]
	if doCheck
		str = String.load(File.expand_path(fn, dir))
		if str.nil?
			output.puts("Failed to load #{File.expand_path(fn, dir)}")
		elsif str =~ lookFor
			path = File.expand_path(fn, dir)
			path[pwd] = ''
			lines = str.split("\n")
			lines.each_with_index do |line, ix|
				if line[lookFor]
					case options[:operation]
					when :show
						output.puts(path+":#{ix+1} #{line}")
					when :open
						files2Open << {path: path, lineNr: ix+1}
					when :choose
						files2Open << "#{path}:#{ix+1} #{line}"
					when :tryReplace, :replace
						print(path+":#{ix+1} (#{line}) -> ")
						line[lookFor] = options[:newStr]
						output.puts("(#{line})")
					end
				end
			end
			if options[:operation] == :replace
				lines.join("\r\n").export(File.expand_path(fn, dir))
			end
		end
	end
	:ok
end

case options[:operation]
when :open
	files2Open.each do |file|
		puts "g +#{file[:lineNr]} #{file[:path]}"
		Thread.new{system("g +#{file[:lineNr]} #{file[:path]}")}
		sleep(0.1)
	end
when :choose
	require("ruby/UI")
	ui = UI.new
	sel = ui.getSelection("Choose the file you want to open", files2Open, :allowDefault)
	case sel
	when :default then sel = sels[0]
	when :stop then sel = nil
	end
	if sel
		p, l = sel[/^([^:]+):/, 1], sel[/^[^:]+:(\d+) /, 1]
		Thread.new{system("g +#{l} #{p}")}
		sleep(0.5)
	end
end
