#!/usr/bin/env ruby

require("gubg/utils")
require("fileutils")
require("optparse")
require("ostruct")

# Parse options
options = OpenStruct.new
options.verbose = false
options.action = :nothing
options.filterOK = /.*/
options.filterKO = /^$/
OptionParser.new do |opts|
  opts.banner = %Q@Usage: treeMerge [options] <baseDir> <sourceDir> <targetDir>
\tbaseDir\tThe most common ancestor
\tsourceDir\tThe directory containing local changes that should be incorporated
\ttargetDir\tThe directory where these changes should be copied to@
  
  opts.on("-r", "--real", "Actually merge") do |v|
    options.action = :merge
  end
  
  opts.on("-v", "--view", "View") do |v|
    options.action = :view
  end
  
  opts.on("-f", "--filterOK [TEXT]", "Filter for files to process") do |v|
    options.filterOK = Regexp.new(v)
    puts("I will use this filterOK: #{options.filterOK}")
  end
  
  opts.on("-F", "--filterKO [TEXT]", "Filter for files NOT to process") do |v|
    options.filterKO = Regexp.new(v)
    puts("I will use this filterKO: #{options.filterKO}")
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts(opts)
    exit
  end
end.parse!

# Set the three dirs
if ARGV.length != 3
  raise "I expected baseDir, sourceDir and targetDir"
end
baseDir, sourceDir, targetDir = ARGV[0], ARGV[1], ARGV[2]

recursor = Proc.new do |dir|
  case dir
  when /\.svn$/
    false
  else
    true
  end
end

newFiles, changedFiles, conflictFiles, deletedFiles, changedTargetDeleted, deletedTargetChanged = [], [], [], [], [], []

def collectInfo(dir, fn, baseDir, sourceDir, targetDir)
  relativeName = Dir.relative(dir + '/', File.expand_path(sourceDir)) + fn
  fnBase, fnSource, fnTarget = *([baseDir, sourceDir, targetDir].collect{|dirH| File.expand_path(relativeName, dirH) })
  md5Base, md5Source, md5Target = *[fnBase, fnSource, fnTarget].collect{|fn|File.exist?(fn) && md5sum(fn)}
  return relativeName, md5Base, md5Source, md5Target
end

# Look for files that where changed or added in the sourceDir compared to the baseDir
time("Looking for new and changed files", options.verbose) do
  Dir.each(sourceDir, recursor) do |dir, fn|
    if (fn[options.filterOK] and !fn[options.filterKO])
      relativeName, md5Base, md5Source, md5Target = collectInfo(dir, fn, baseDir, sourceDir, targetDir)
      if !md5Base
        puts("\tAdded by us: \"#{relativeName}\"") if options.verbose
        newFiles << relativeName
      elsif md5Base != md5Source
        if md5Base != md5Target
          if md5Target
            puts("\tChanged by us and target: \"#{relativeName}\"") if options.verbose
            conflictFiles << relativeName
          else
            puts("\tChanged by us but deleted by target: \"#{relativeName}\"") if options.verbose
            changedTargetDeleted << relativeName
          end
        else
          puts("\tChanged by us: \"#{relativeName}\"") if options.verbose
          changedFiles << relativeName
        end
      end
    end
    nil
  end
end

# Look for files that where deleted in the sourceDir compared to the baseDir
puts("") if options.verbose
time("Looking for deleted files", options.verbose) do
  Dir.each(baseDir, recursor) do |dir, fn|
    if (fn[options.filterOK] and !fn[options.filterKO])
      relativeName, md5Base, md5Source, md5Target = collectInfo(dir, fn, baseDir, sourceDir, targetDir)
      if !md5Source
        if md5Base == md5Target
          puts("\tDeleted by us: \"#{relativeName}\"") if options.verbose
          deletedFiles << relativeName
        else
          puts("\tDeleted by us but changed by target: \"#{relativeName}\"") if options.verbose
          deletedTargetChanged << relativeName
        end if md5Target
      end
    end
    nil
  end
end

# Remove the deliver_status from the list of changed files
changedFiles.reject!{|relativeName|relativeName == "./deliver_status"}

# Print the summary
puts("\nSummary\n-------\n")
puts("baseDir = \"#{baseDir}\"")
puts("sourceDir = \"#{sourceDir}\"")
puts("targetDir = \"#{targetDir}\"")
def printFiles(message, ary)
  if !ary.empty?
    puts("#{message} (#{ary.length}):")
    ary.each do |relativeName|
      puts("\t#{relativeName}")
    end
  end
end
printFiles("Files added by us", newFiles)
printFiles("Files changed only by us", changedFiles)
printFiles("Files deleted only by us", deletedFiles)
printFiles("Files changed both by us and by target", conflictFiles)
printFiles("Files changed by us but deleted by target", changedTargetDeleted)
printFiles("Files deleted by us but changed by target", deletedTargetChanged)
puts("End of summary.\n\n")

case options.action
when :merge
  # Copy new files
  newFiles.each do |relativeName|
    fnTarget = File.expand_path(relativeName, targetDir)
    FileUtils.makedirs(File.dirname(fnTarget))
    FileUtils.copy(File.expand_path(relativeName, sourceDir), fnTarget)
    Dir.chdir(targetDir) do
      `svn add #{relativeName}`
    end
  end
  # Copy changed files
  changedFiles.each do |relativeName|
    FileUtils.copy(File.expand_path(relativeName, sourceDir), File.expand_path(relativeName, targetDir))
  end
  # Remove deleted files
  Dir.chdir(targetDir) do
    deletedFiles.each do |relativeName|
      `svn rm #{relativeName}`
    end
  end
  # Merge the conflicting files
  puts("Resolving conflicts:")
  conflictFiles.each do |relativeName|
    puts("\t#{relativeName}")
    fnBase, fnSource, fnTarget = *[baseDir, sourceDir, targetDir].collect{|dirH|File.expand_path(relativeName, dirH)}
    `kdiff3 -m -o #{fnTarget} #{fnBase} #{fnSource} #{fnTarget}`
  end
when :view
  # Copy changed files
  puts("Showing changes:")
  changedFiles.each do |relativeName|
    puts("\t#{relativeName}")
    fnBase, fnSource, fnTarget = *[baseDir, sourceDir, targetDir].collect{|dirH|File.expand_path(relativeName, dirH)}
    `kdiff3 #{fnBase} #{fnSource} #{fnTarget}`
  end
  # Show conflicts
  puts("Showing conflicts:")
  conflictFiles.each do |relativeName|
    puts("\t#{relativeName}")
    fnBase, fnSource, fnTarget = *[baseDir, sourceDir, targetDir].collect{|dirH|File.expand_path(relativeName, dirH)}
    `kdiff3 #{fnBase} #{fnSource} #{fnTarget}`
  end
end

# Print list of files that need manual merge
printFiles("WARNING::These files are changed by us, but deleted by target. Fix manually.", changedTargetDeleted)
printFiles("WARNING::These files are deleted by us, but changed by target. Fix manually.", deletedTargetChanged)
